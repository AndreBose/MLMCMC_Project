##########
#        #
#  EXP1  #
#        #
##########


# System

stochastic  = False         # random seeds for the experiments

RANDOM_SEED = 123446        # sampling seed
NUMPY_SEED  = 123           # Numpy    seed


# True model

mu_true    = 2              # diffusion parameter
theta_true = np.pi          # advection angle parameter

n_params   = 2              # number of unknown quantities

x_0   = np.array([0.5,0.5]) # center of the bump source-force

forcing = '10*exp(-50*pow( pow(x[0]-x_00, 2) + pow(x[1]-x_01, 2), 0.5))' # forcing term in the PDE

noise_scale = 0.00001       # noise scale in the output data


# PDE solver

poly_degree = 2                      # polynomial degree for the FEniCS solver

n_data_hv_true   = 256               # number of segments on both vertical and horizontal axis, for the true model
n_data_hv_levels = np.array([16,32]) # number of segments on both vertical and horizontal axis, for each level of approximation


# Priors for unknown parameters

lower_mu    = 0.1       # lower bound for mu    (supposing mu ~ Uniform)
upper_mu    = 5         # upper bound for mu
lower_theta = 0         # lower bound for theta (supposing theta ~ Uniform)
upper_theta = 2*np.pi   # upper bound for theta

# starting point 
use_MAP_as_start = False  # set true to use MAP as starting point, else uses [mu_0, theta_0] (sembra dare problemi MAP)
mu_0        = 3.5         # initial guess for mu unknown parameter
theta_0     = 2           # initial guess for theta unknown parameter
 

# Likelihood

sigma = np.array([0.0006,0.0004]) # value that determines the variance in the likelihood (first: coarse; last: fine)

plot_likelihood = True  # plot likelihood at each level 
n_ref_lik   = 30        # precision of the grid for the plot
contour_lik = 10        # number of contour lines in each plot


# MCMC: Metropolis and MLDA

perform_M    = True    # perform the Metropolis sampling

ndraws_M     = 2700    # number of draws from the distribution for M
nburn_M      =  300    # number of burn-in samples for M
nchains_M    = 1       # number of chains for M


perform_MLDA_without_variance_reduction = True   # perform the MLDA sampling without variance reduction
perform_MLDA_with_variance_reduction    = True   # perform the MLDA sampling with variance reduction

ndraws_MLDA  = 1300     # number of draws from the distribution for MLDA
nburn_MLDA   =  300     # number of burn-in samples for MLDA
nchains_MLDA = 1        # number of chains for MLDA
nsub_MLDA    = 2        # subsampling rate for MLDA


tune           = True
tune_interval  = 100   # set high to prevent tuning
discard_tuning = True